openapi: 3.0.0
info:
  title: Library Management System
  description: API's for managing users, roles, books, and sections in a library system.   Done by Karthik Reddy (21F2000776)
  version: 2.0.0
servers:
  - url: http://127.0.0.1:5000/

paths:
  /api/users:
    get:
      tags:
        - users
      summary: Retrieve all users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: The user's ID
                    username:
                      type: string
                      description: The username of the user
                    email:
                      type: string
                      description: The user's email
                    active:
                      type: boolean
                      description: Status of the user's account
                    last_login:
                      type: string
                      format: date-time
                      description: Timestamp of the last login
                    
    post:
      tags:
        - users
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username of the user
                email:
                  type: string
                  description: The user's email
                password:
                  type: string
                  description: The user's password
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: User created successfully

  /api/books:
    get:
      tags:
        - books
      summary: Retrieve all books
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: The book's ID
                    title:
                      type: string
                      description: The title of the book
                    authors:
                      type: string
                      description: The authors of the book
                    section_id:
                      type: integer
                      description: The section ID to which the book belongs

    post:
      tags:
        - books
      summary: Add a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The title of the book
                content:
                  type: string
                  description: The content of the book
                authors:
                  type: string
                  description: The authors of the book
                section_id:
                  type: integer
                  description: The section ID to which the book should be added
              required:
                - title
                - content
                - authors
                - section_id
      responses:
        '201':
          description: Book added successfully
  /api/books/{bookId}/request:
    post:
      tags:
        - Books
      summary: Request a book
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Request submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  request_id:
                    type: integer
                  date_of_issue:
                    type: string
                  return_date:
                    type: string
                  status:
                    type: string
                  book:
                    type: object
                    properties:
                      id:
                        type: integer
                      requested:
                        type: boolean
                      allocated:
                        type: boolean
                      status:
                        type: string
        '400':
          description: A User can only request 5 books at a time
        '409':
          description: Book is already requested or allocated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  date_of_issue:
                    type: string
                  return_date:
                    type: string
                  
  /api/requests:
    get:
      tags:
        - Requests
      summary: Get all requested books
      responses:
        '200':
          description: List of requested books
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    book_id:
                      type: integer
                    user_id:
                      type: integer
                    status:
                      type: string

  /api/grant_book:
    post:
      tags:
        - Books
      summary: Grant a book request
      responses:
        '200':
          description: Book granted successfully
        '400':
          description: User ID is required
        '404':
          description: Book is already allocated or not found

  /api/reject_book:
    post:
      tags:
        - Books
      summary: Reject a book request
      responses:
        '200':
          description: Book request successfully rejected
        '400':
          description: Both user ID and book ID are required
        '404':
          description: No such book request found

  # Other paths like /api/allocated_books, /api/deallocate_book, etc., would follow the same pattern:
  # Each endpoint will include complete response schemas and examples to represent successful and error cases.

  /trigger-csv-export:
    post:
      tags:
        - Export
      summary: Trigger CSV export
      responses:
        '202':
          description: CSV export triggered
          content:
            application/json:
              schema:
                type: object
                properties:
                  Task_ID:
                    type: string
                  Task_State:
                    type: string
                  Task_Result:
                    type: string

  /status/{id}:
    get:
      tags:
        - Status
      summary: Check status used for Celery tasks
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Status of the task
          content:
            application/json:
              schema:
                type: object
                properties:
                  Task_ID:
                    type: string
                  Task_State:
                    type: string
                  Task_Result:
                    type: string

